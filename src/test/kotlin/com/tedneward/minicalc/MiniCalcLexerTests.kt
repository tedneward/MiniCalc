/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.tedneward.minicalc

import kotlin.test.Test
import kotlin.test.assertNotNull
import kotlin.test.assertEquals
import org.antlr.v4.runtime.ANTLRInputStream
import org.antlr.v4.runtime.Token
import java.io.FileInputStream
import java.io.StringReader
import java.util.LinkedList

fun tokensContent(lexer: MiniCalcLexer): List<String> {
    val tokens = LinkedList<String>()
    do {
        val t = lexer.nextToken()
        when (t.type) {
            -1 -> tokens.add("EOF")
            else -> if (t.type != MiniCalcLexer.WS) tokens.add(lexer.text)
        }
    } while (t.type != -1)
    return tokens
}

fun lexerForCode(code: String) = MiniCalcLexer(ANTLRInputStream(StringReader(code)))

fun tokensNames(lexer: MiniCalcLexer): List<String> {
    val tokens = LinkedList<String>()
    do {
        val t = lexer.nextToken()
        when (t.type) {
            -1 -> tokens.add("EOF")
            else -> if (t.type != MiniCalcLexer.WS) tokens.add(lexer.vocabulary.getSymbolicName(t.type))
        }
    } while (t.type != -1)
    return tokens
}

class MiniCalcLexerTests {
    @Test fun testMath() {
        assertEquals(2, 1+1)
    }

    val tests = mapOf(
        "var a = 1" to listOf("VAR", "UNMATCHED", "ID", "UNMATCHED", "ASSIGN", "UNMATCHED", "INTLIT", "EOF"),
        "var a = 1.23" to listOf("VAR", "UNMATCHED", "ID", "UNMATCHED", "ASSIGN", "UNMATCHED", "DECLIT", "EOF"),
        "var a = 1+2" to listOf("VAR", "UNMATCHED", "ID", "UNMATCHED", "ASSIGN", "UNMATCHED", "INTLIT", "PLUS", "INTLIT", "EOF"),
        "1+a*3/4-5" to listOf("INTLIT", "PLUS", "ID", "ASTERISK", "INTLIT", "DIVISION", "INTLIT", "MINUS", "INTLIT", "EOF")
    )

    @Test fun parseTests() {
        for ((k,v) in tests) {
            assertEquals(v, tokensNames(lexerForCode(k)))
        }
    }

    /*
input Int width
input Int height
var area = width * height
print("A rectangle #{width}x#{height} has an area #{area}")
     */
    val rectangleTests = mapOf(
        "input Int width" to listOf("INPUT", "INT", "ID"),
        "input Int height" to listOf("INPUT", "INT", "ID"),
        "var area=width*height" 
            to listOf("VAR", "ID", "ASSIGN", "ID", "ASTERISK", "ID"),
        "print (\"A rectangle #{width}x#{height} has an area #{area}\")"
            to listOf("PRINT", "LPAREN", "STRING_OPEN", 
                "STRING_CONTENT", "INTERPOLATION_OPEN", "ID", "INTERPOLATION_CLOSE",
                "STRING_CONTENT", "INTERPOLATION_OPEN", "ID", "INTERPOLATION_CLOSE",
                "STRING_CONTENT", "INTERPOLATION_OPEN", "ID", "INTERPOLATION_CLOSE",
                "STRING_CLOSE", "RPAREN")
    )
    @Test fun rectangleExampleLine1Test() {
        for ((k,v) in tests) {
            assertEquals(v, tokensNames(lexerForCode(k)))
        }
    }
}
